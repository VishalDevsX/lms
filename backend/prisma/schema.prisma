// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  password     String
  phoneNumber  String?
  role         String
  profileImage String?
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  lastLogin    DateTime?

  //Relations
  fees     Fee[]
  students Students[]
  staff    Staff[]
}

model Staff {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  password    String
  role        String
  phoneNumber String?
  salary      Float
  Admin       Admin?  @relation(fields: [adminId], references: [id])
  adminId     String?
}

model Students {
  adharNumber  String   @id @default(uuid())
  fullName     String
  class        String
  phoneNumber  String?
  fatherName   String?
  motherName   String?
  profileImage String?
  dob          DateTime
  address      String
  bloodGroup   String?
  fees         Fee[]
  Admin        Admin?   @relation(fields: [adminId], references: [id])
  adminId      String?
}

model FeeStructure {
  id          Int     @id @default(autoincrement())
  feeType     String
  amout       Float
  grade       String?
  description String?
  fees        Fee[]
}

model Fee {
  id                  Int           @id @default(autoincrement())
  dueDate             DateTime
  amoutDue            Float
  amoutPaid           Float         @default(0.0)
  paymentDate         DateTime?
  paymentStatus       String        @default("Pending")
  lateFee             Float         @default(0.0)
  outstandingBalance  Float         @default(0.0)
  payments            Payment[]
  FeeStructure        FeeStructure? @relation(fields: [feeStructureId], references: [id])
  feeStructureId      Int?
  Students            Students?     @relation(fields: [studentsAdharNumber], references: [adharNumber])
  studentsAdharNumber String?
  Admin               Admin?        @relation(fields: [adminId], references: [id])
  adminId             String?
}

model Payment {
  id            Int      @id @default(autoincrement())
  paymentDate   DateTime
  paymentMethod String
  amoutPaid     Float
  receiptNumber String   @unique
  Fee           Fee?     @relation(fields: [feeId], references: [id])
  feeId         Int?
}
