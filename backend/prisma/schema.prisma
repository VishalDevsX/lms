generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id           Int            @id @default(autoincrement())
  name         String
  fatherName   String
  motherName   String
  gender       Gender
  grade        Grade
  address      String
  profilePic   String?
  rollNumber   String         @unique
  bloodGroup   String? // Optional
  mobileNumber String? // Optional
  createdAt    DateTime       @default(now())
  payments     Payment[]
  feeHistory   FeeHistory[]
  StudentFee   StudentFee[]
  feeStructur  FeeStructure[]
}

model FeeStructure {
  id          Int          @id @default(autoincrement())
  name        String
  amount      Decimal
  dueDate     DateTime
  grade       Grade
  frequency   FeeFrequency
  studentFees StudentFee[]
  Student     Student?     @relation(fields: [studentId], references: [id])
  studentId   Int?
}

model StudentFee {
  id         Int       @id @default(autoincrement())
  status     FeeStatus @default(PENDING)
  paidAmount Decimal   @default(0.0)
  dueAmount  Decimal
  dueDate    DateTime
  payments   Payment[]

  Student        Student?      @relation(fields: [studentId], references: [id])
  studentId      Int?
  FeeStructure   FeeStructure? @relation(fields: [feeStructureId], references: [id])
  feeStructureId Int?
}

model Payment {
  id             String         @id @default(uuid())
  amount         Decimal
  method         PaymentMethod
  transactionId  String? // Gateway transaction ID
  paymentGateway PaymentGateway
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  Student      Student?    @relation(fields: [studentId], references: [id])
  studentId    Int?
  StudentFee   StudentFee? @relation(fields: [studentFeeId], references: [id])
  studentFeeId Int?
}

model FeeHistory {
  id Int @id @default(autoincrement())

  amount    Decimal
  status    FeeStatus
  paidDate  DateTime?
  createdAt DateTime  @default(now())
  Student   Student?  @relation(fields: [studentId], references: [id])
  studentId Int?
}

enum PaymentGateway {
  STRIPE
  RAZORPAY
  PAYPAL
  PAYTM
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  UPI
  PAYPAL
}

enum FeeFrequency {
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

enum FeeStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Grade {
  I
  II
  III
  IV
  V
  VI
  VII
  VIII
  IX
  X
}
