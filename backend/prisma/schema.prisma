// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  password       String
  role           Role
  profile        Profile?
  student        Student?
  staff          Staff?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ExpenseTracker ExpenseTracker[]
}

model Profile {
  id      Int     @id @default(autoincrement())
  userId  Int     @unique
  phone   String
  address String
  user    User    @relation(fields: [userId], references: [id])
  Staff   Staff[]
}

model Student {
  id         Int          @id @default(autoincrement())
  userId     Int          @unique
  rollNumber String       @unique
  feeHistory FeeHistory[]
  results    Result[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User         @relation(fields: [userId], references: [id])
  FeeSystem  FeeSystem[]
}

model Staff {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  staffId   String   @unique
  profile   Profile? @relation(fields: [profileId], references: [id])
  results   Result[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  profileId Int?
}

model FeeHistory {
  id        Int      @id @default(autoincrement())
  studentId Int
  amount    Float
  paidOn    DateTime
  student   Student  @relation(fields: [studentId], references: [id])
}

model Result {
  id        Int      @id @default(autoincrement())
  studentId Int
  staffId   Int
  subject   String
  grade     String
  date      DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id])
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model FeeSystem {
  id        Int      @id @default(autoincrement())
  studentId Int
  amount    Float
  dueDate   DateTime
  paid      Boolean  @default(false)
  student   Student  @relation(fields: [studentId], references: [id])
}

model ExpenseTracker {
  id          Int      @id @default(autoincrement())
  amount      Float
  description String
  date        DateTime @default(now())
  createdBy   Int
  user        User     @relation(fields: [createdBy], references: [id])
}

enum Role {
  ADMIN
  STUDENT
  STAFF
}
