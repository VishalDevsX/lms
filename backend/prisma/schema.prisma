generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int    @id @default(autoincrement())
  name       String
  email      String @unique
  password   String
  profilePic String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Profile   Profile?
}

model Profile {
  id      Int    @id @default(autoincrement())
  adminId Int    @unique
  phone   String
  address String
  admin   Admin  @relation(fields: [adminId], references: [id])
  // Staff   Staff[]
}

model Student {
  id           String      @id @default(uuid())
  name         String
  fatherName   String
  motherName   String
  gender       String
  grade        String
  address      String
  profilePic   String
  rollNumber   String      @unique
  bloodGroup   String? // Optional
  mobileNumber String? // Optional
  createdAt    DateTime    @default(now())
  FeeRecord    FeeRecord[]
}

model FeeRecord {
  id          Int       @id @default(autoincrement())
  month       String
  amount      Float
  dueDate     DateTime
  status      FeeStatus @default(PENDING)
  paymentDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
}

enum FeeStatus {
  PENDING
  PAID
  OVERDUE
}

enum Gender {
  Male
  Female
  Others
}

// model Staff {
//   id        Int      @id @default(autoincrement())
//   adminId   Int
//   staffId   String   @unique
//   profileId Int?
//   results   Result[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   admin     Admin    @relation(fields: [adminId], references: [id])
//   profile   Profile? @relation(fields: [profileId], references: [id])
// }

// model Result {
//   id        Int      @id @default(autoincrement())
//   studentId Int
//   staffId   Int
//   subject   String
//   grade     String
//   date      DateTime @default(now())
//   student   Student  @relation(fields: [studentId], references: [id])
//   staff     Staff    @relation(fields: [staffId], references: [id])
// }

// model Expense {
//   id          Int      @id @default(autoincrement())
//   adminId     Int
//   amount      Float
//   description String
//   date        DateTime @default(now())
//   admin       Admin    @relation(fields: [adminId], references: [id])
// }

// enum Role {
//   ADMIN
//   STUDENT
//   STAFF
// }

// enum Gender {
//   Male
//   Female
//   Others
// }
